// this file is used to generate various files for the project
package main

//go:generate go run . runtimes

import (
	"errors"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/sinux-l5d/studentbox/internal/runtimes"
)

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	args := os.Args[1:]
	switch args[0] {
	case "runtimes":
		generateRuntimes()
	default:
		die(errors.New("unknown generator"))
	}
}

var runtimesTemplate = `// Code generated by go generate; DO NOT EDIT.
package runtimes

var OfficialRuntimes = map[string]Runtime{
	{{- range $key, $value := .}}
	"{{ $key }}": {
		{{- with $value }}
		Name: "{{ .Name }}",
		Images: map[string]Image{
			{{- range .Images }}
			"{{ .ShortName }}": {
				FullyQualifiedName: "{{ .FullyQualifiedName }}",
				ShortName:          "{{ .ShortName }}",
				Mounts: map[string]string{
					{{- range $key, $value := .Mounts }}
					"{{ $key }}": "{{ $value }}",
					{{- end }}
				},
				EnvVars: []*EnvVar{
					{{- range .EnvVars }}
					{
						Name: "{{ .Name }}",
						DefaultValue: "{{ .DefaultValue }}",
						Modifiers: []EnvModifierParams{
							{{- range .Modifiers }}
							{
								Name: "{{ .Name }}",
								Params: []string{
									{{- range .Params }}
									"{{ . }}",
									{{- end }}
								},
							},
							{{- end }}
						},
					},
					{{- end }}
				},
			},
			{{- end }}
		{{- end }}
		},
	},
	{{- end }}
}
`

func generateRuntimes() {
	tmpl := template.Must(template.New("runtimes").Parse(runtimesTemplate))

	// get dir names in runtimes dir
	runtimesDir, err := os.Open("../../runtimes")
	die(err)

	runtimesName, err := runtimesDir.Readdirnames(0)
	runtimesDir.Close()
	die(err)

	forTemplate := make(map[string]runtimes.Runtime, len(runtimesName))
	for _, runtimeName := range runtimesName {
		// get dir names in runtimes/<runtimeName> dir
		runtimeDir, err := os.Open("../../runtimes/" + runtimeName)
		die(err)
		defer runtimeDir.Close()

		forTemplate[runtimeName] = runtimes.Runtime{Name: runtimeName, Images: make(map[string]runtimes.Image)}

		// Get all file in runtimes/<runtimeName> dir but keep only the ones that end with .containerfile
		runtimeFiles, err := runtimeDir.Readdirnames(0)
		die(err)
		for _, filename := range runtimeFiles {
			if strings.HasSuffix(filename, ".containerfile") {
				imgConfig, err := getImageConfigFromFile("../../runtimes/" + runtimeName + "/" + filename)
				die(err)
				forTemplate[runtimeName].Images[imgConfig.ShortName] = *imgConfig
			}
		}
	}

	// print toTemplate as json
	// b, err := json.MarshalIndent(forTemplate, "", "  ")
	// die(err)
	// fmt.Println(string(b))
	// _ = tmpl

	f, err := os.Create("../runtimes/generated.go")
	die(err)
	defer f.Close()
	tmpl.Execute(f, forTemplate)
}
